# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  tester:
    docker:
      - image: circleci/python:3.7
  publisher:
    docker:
      - image: circleci/python:3.8

workflows:
  # Create workflow for testing and deploying PyDynamic.
  test_and_deploy:
    jobs:
      # Create 'test' job to test and install PyDynamic for every commit.
      - test
      - install
      - deploy:
          # Create 'deploy' job to create a release and publish it on GitHub,
          # Zenodo and PyPI.org.
          requires:
              - test
              - install
          filters:
              branches:
                # This assures the job only being triggered on branch master.
                only: /master/
jobs:
  test:
    executor: tester

    working_directory: ~/repo

    steps:
      # Checkout code.
      - checkout

      # Create folder for test results.
      - run:
          name: Create test result folder
          command: |
            mkdir test-reports

      # Download and cache dependencies.
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements/requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-dependencies-

      # Install dependencies and Codecov reporter if necessary.
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements/requirements.txt
            pip install -r requirements/dev-requirements.txt

      - save_cache:
          key: v1-dependencies-{{ checksum "requirements/requirements.txt" }}
          paths:
            - ./test_env

      # Run tests with coverage report and upload results to Codecov!
      - run:
          name: Run tests
          command: |
            source venv/bin/activate
            pytest -v --junitxml=test-reports/pytest.xml \
            --cov=PyDynamic/ > test-reports/pytest.log

      # Upload coverage report.
      - run:
          name: Upload coverage report
          command: |
            source venv/bin/activate
            bash <(curl -s https://codecov.io/bash)

      # Store test results.
      - store_artifacts:
          path: test-reports
          destination: test-reports

      - store_test_results:
          path: test-reports

  install:
    executor: tester

    working_directory: ~/repo

    steps:
      # Checkout code.
      - checkout

      # Download and cache dependencies.
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements/requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-dependencies-

      # Install dependencies and Codecov reporter if necessary.
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements/requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements/requirements.txt" }}

      # Install PyDynamic.
      - run:
          name: Install PyDynamic
          command: |
            source venv/bin/activate
            python3 setup.py install

  deploy:
    executor: publisher

    working_directory: ~/repo

    steps:
      # Checkout code.
      - checkout

      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - publisher-dependencies

      # Install dependencies.
      - run:
          name: Install python dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install python-semantic-release

      - save_cache:
          key: publisher-dependencies
          paths:
            - ./venv

      # Publish it!
      - run:
          name: Run semantic-release publish
          command: |
            source venv/bin/activate
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            semantic-release publish
