# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  # Define a parameterized executor which accepts two parameters to choose the python
  # version which will be used for the docker image and the tox actions.
  tester:
    working_directory: ~/repo
    parameters:
      tag:
        type: string
        default: "3.8"
      pyenv:
        type: string
        default: "py38"
    docker:
      - image: circleci/python:<< parameters.tag >>
    environment:
      PYENV: << parameters.pyenv >>
  # Define the executor for the Python semantic release.
  publisher:
    working_directory: ~/repo
    parameters:
      tag:
        type: string
        default: "3.8"
      pyenv:
        type: string
        default: "py38"
    docker:
      - image: circleci/python:<< parameters.tag >>
    environment:
      PYENV: << parameters.pyenv >>

commands:
  # Reusable command to prepare the environment for testing.
  create_folders_and_venv:
    description: "Prepare everything."
    parameters:
      pyenv:
        type: string
        default: "py38"
    steps:
    # Checkout code.
    - checkout
    # Create test-result folder.
    - run:
        name: Create test result folder
        command: |
          mkdir test-results

    # Download and cache dependencies.
    - restore_cache:
        keys:
          - << parameters.pyenv >> -dependencies-
              {{ checksum "requirements/dev-requirements.in" }}
              {{ checksum "requirements/requirements.in" }}
          # Fallback to using the latest cache if no exact match is found.
          - << parameters.pyenv >> -dependencies-

    # Create PyDynamic virtual environment.
    - run:
        name: Create virtual environment
        command: |
          python3 -m venv << parameters.pyenv >>
          source << parameters.pyenv >>/bin/activate
          pip install --upgrade pip setuptools

  # Reusable command to install production dependencies.
  install__production_deps:
    description: "Install production dependencies."
    parameters:
      pyenv:
        type: string
        default: "py38"
    steps:

    # Install dependencies.
    - run:
        name: Install production dependencies
        command: |
          source << parameters.pyenv >>/bin/activate
          pip install -r requirements/requirements-<< parameters.pyenv >>.txt

  # Reusable command to install development dependencies.
  install__development_deps:
    description: "Install development dependencies."
    parameters:
      pyenv:
        type: string
        default: "py38"
    steps:

    # Install dependencies.
    - run:
        name: Install development dependencies
        command: |
          source << parameters.pyenv >>/bin/activate
          pip install -r requirements/dev-requirements-<< parameters.pyenv >>.txt

  # Reusable command to conduct actual testing.
  tox:
    description: "Perform tox testing."
    parameters:
      pyenv:
        type: string
    steps:

    # Perform tox testing.
    - run:
        name: Perform tox testing
        command: |
          source << parameters.pyenv >>/bin/activate
          tox -e << parameters.pyenv >> >> test-results/pytest.log

  # Reusable command to store the previously generated test results.
  store_results:
    description: "Store test results and artifacts."
    parameters:
      pyenv:
        type: string
    steps:
    # Store test results.
    - store_artifacts:
        path: test-results
        destination: test-results

    - store_test_results:
        path: test-results

    - save_cache:
        paths:
          - .tox/<< parameters.pyenv >>
        key: << parameters.pyenv >> -dependencies-
          {{ checksum "requirements/dev-requirements.in" }}
          {{ checksum "requirements/requirements.in" }}

workflows:
  # Create workflow for testing and deploying PyDynamic.
  test_and_deploy:
    jobs:
      # Create 'test' job to test and install PyDynamic for every commit.
      - test35
      - test36
      - test37
      - test38
      - deploy:
          # Create 'deploy' job to create a release and publish it on GitHub,
          # Zenodo and PyPI.org.
          requires:
              - test35
              - test36
              - test37
              - test38
          filters:
              branches:
                # This assures the job only being triggered on branch master.
                only: /master/
      - test_deploy:
          # Test the 'deploy' job to avoid trouble when Pull Requets get merged.
          requires:
              - test35
              - test36
              - test37
              - test38
          filters:
              branches:
                # This assures the job is not triggered on branch master, where the
                # `deploy` job itself will be triggered. `test_deploy` is basically
                # `deploy` with the `noop` parameter for `semantic-release` to
                # trigger a dry-run.
                ignore: /master/
jobs:
  test35:
    executor:
      name: tester
      tag: "3.5"
      pyenv: "py35"

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__production_deps:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}
      - tox:
          pyenv: ${PYENV}
      - store_results:
          pyenv: ${PYENV}

  test36:
    executor:
      name: tester
      tag: "3.6"
      pyenv: "py36"

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__production_deps:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}
      - tox:
          pyenv: ${PYENV}
      - store_results:
          pyenv: ${PYENV}

  test37:
    executor:
      name: tester
      tag: "3.7"
      pyenv: "py37"

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__production_deps:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}
      - tox:
          pyenv: ${PYENV}
      - store_results:
          pyenv: ${PYENV}

      # Upload coverage report.
      - run:
          name: Upload coverage report
          command: |
            source ${PYENV}/bin/activate
            bash <(curl -s https://codecov.io/bash)

  test38:
    executor:
      name: tester
      tag: "3.8"
      pyenv: "py38"

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__production_deps:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}
      - tox:
          pyenv: ${PYENV}
      - store_results:
          pyenv: ${PYENV}

  deploy:
    executor:
      name: publisher

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__production_deps:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}

      # Publish it!
      - run:
          name: Run semantic-release publish
          command: |
            source ${PYENV}/bin/activate
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            semantic-release publish

  test_deploy:
    executor:
      name: publisher

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__production_deps:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}

      # Pretend to publish, just to make sure everything works after merging those PR.
      - run:
          name: Run semantic-release --noop publish
          command: |
            source ${PYENV}/bin/activate
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            export CIRCLE_BRANCH=master
            semantic-release --noop publish
